// const express = require("express");
// const { Server } = require("socket.io");
// const http = require("http");
// const cors = require("cors");

// const app = express();
// app.use(cors());

// const server = http.createServer(app);
// const io = new Server(server, {
//   cors: {
//     origin: "*",
//     methods: ["GET", "POST"],
//   },
// });

// let connectedPCs = {};

// io.on("connection", (socket) => {
//   console.log("Client connected:", socket.id);

//   // Register a PC
//   socket.on("register-pc", (pcId, callback) => {
//     connectedPCs[pcId] = socket.id;
//     console.log(`PC registered: ${pcId}`);
//     io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify all admins
//     callback({ success: true });
//   });

//   // Handle camera streams
//   socket.on("camera-stream", ({ pcId, frame }) => {
//     if (connectedPCs[pcId]) {
//       io.emit("camera-frame", { pcId, frame }); // Broadcast to admins
//     }
//   });

//   // Handle PC disconnection
//   socket.on("disconnect", () => {
//     const pcId = Object.keys(connectedPCs).find(
//       (id) => connectedPCs[id] === socket.id
//     );
//     if (pcId) {
//       delete connectedPCs[pcId];
//       console.log(`PC disconnected: ${pcId}`);
//       io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify admins
//     }
//   });

//   // Admin request for connected PCs
//   socket.on("get-connected-pcs", () => {
//     socket.emit("update-pc-list", Object.keys(connectedPCs));
//   });
// });

// server.listen(8000, () => {
//   console.log("Server running on http://localhost:8000");
// });
  

// Beta 
// const express = require("express");
// const { Server } = require("socket.io");
// const http = require("http");
// const cors = require("cors");

// const app = express();
// app.use(cors());

// const server = http.createServer(app);
// const io = new Server(server, {
//   cors: {
//     origin: "*",
//     methods: ["GET", "POST"],
//   },
// });

// let connectedPCs = {};

// // Notify all clients about server restart
// io.on("connection", (socket) => {
//   console.log("Client connected:", socket.id);

//   // Emit a server-restart event to all clients
//   socket.emit("server-restart");

//   // Handle PC registration
//   socket.on("register-pc", (pcId, callback) => {
//     connectedPCs[pcId] = socket.id;
//     console.log(`PC registered: ${pcId}`);
//     io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify all admins
//     callback({ success: true });
//   });

//   // Handle camera streams
//   socket.on("camera-stream", ({ pcId, frame }) => {
//     if (connectedPCs[pcId]) {
//       io.emit("camera-frame", { pcId, frame }); // Broadcast to admins
//     }
//   });

//   // Handle PC disconnection
//   socket.on("disconnect", () => {
//     const pcId = Object.keys(connectedPCs).find(
//       (id) => connectedPCs[id] === socket.id
//     );
//     if (pcId) {
//       delete connectedPCs[pcId];
//       console.log(`PC disconnected: ${pcId}`);
//       io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify admins
//     }
//   });

//   // Admin request for connected PCs
//   socket.on("get-connected-pcs", () => {
//     socket.emit("update-pc-list", Object.keys(connectedPCs));
//   });
// });

// const io = new Server(server, {
//     cors: {
//       origin: "*",
//       methods: ["GET", "POST"],
//     },
//   });
  
//   let connectedPCs = {};
//   let adminConnections = 0;
  
//   io.on("connection", (socket) => {
//     console.log(`Client connected: ${socket.id}`);
  
//     // Track admins for logging/debugging
//     socket.on("admin-connect", () => {
//       adminConnections++;
//       console.log(`Admin connected. Total admins: ${adminConnections}`);
//     });
  
//     // Track PCs
//     socket.on("register-pc", (pcId, callback) => {
//       connectedPCs[pcId] = socket.id;
//       console.log(`PC registered: ${pcId}`);
//       io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify admins
//       callback({ success: true });
//     });
  
//     // Handle camera stream
//     socket.on("camera-stream", ({ pcId, frame }) => {
//       if (connectedPCs[pcId]) {
//         io.emit("camera-frame", { pcId, frame });
//       }
//     });
  
//     // Handle disconnection
//     socket.on("disconnect", () => {
//       console.log(`Client disconnected: ${socket.id}`);
//       const pcId = Object.keys(connectedPCs).find(
//         (id) => connectedPCs[id] === socket.id
//       );
//       if (pcId) {
//         delete connectedPCs[pcId];
//         io.emit("update-pc-list", Object.keys(connectedPCs));
//       } else {
//         adminConnections--;
//         console.log(`Admin disconnected. Total admins: ${adminConnections}`);
//       }
//     });
//   });
  
// server.listen(8000, () => {
//   console.log("Server running on http://localhost:8000");
// });


/************************************************************/ 

 
// const express = require("express");
// const { Server } = require("socket.io");
// const http = require("http");
// const cors = require("cors");

// const app = express();
// app.use(cors());

// const server = http.createServer(app);
// const io = new Server(server, {
//   cors: {
//     origin: "*",
//     methods: ["GET", "POST"],
//   },
// });

// let connectedPCs = {}; // Track connected PCs
// let adminCount = 0; // Track connected admins

// io.on("connection", (socket) => {
//   console.log(`Client connected: ${socket.id}`);

//   // Handle PC registration
//   socket.on("register-pc", (pcId, callback) => {
//     connectedPCs[pcId] = socket.id;
//     console.log(`PC registered: ${pcId}`);
//     io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify admins
//     if (callback) callback({ success: true });
//   });

//   // Handle camera frames
//   socket.on("camera-stream", ({ pcId, frame }) => {
//     if (connectedPCs[pcId]) {
//       io.emit("camera-frame", { pcId, frame }); // Broadcast frame to admin
//     }
//   });

//    // Handle close-camera command from admin
//    socket.on("close-camera", (pcId) => {
//     const pcSocketId = connectedPCs[pcId];
//     if (pcSocketId) {
//       io.to(pcSocketId).emit("close-camera"); // Forward the command to the PC
//       console.log(`Close camera command sent to PC: ${pcId}`);
//     }
//   });

//   // Handle admin connection
//   socket.on("admin-connect", () => {
//     adminCount++;
//     console.log(`Admin connected. Total admins: ${adminCount}`);
//     // Prompt PCs to re-register
//     if (adminCount === 1) {
//       io.emit("request-re-registration");
//     }
//     // Send the current PC list to the admin
//     socket.emit("update-pc-list", Object.keys(connectedPCs));
//   });

//   // Handle client disconnection
//   socket.on("disconnect", () => {
//     const pcId = Object.keys(connectedPCs).find(
//       (id) => connectedPCs[id] === socket.id
//     );
//     if (pcId) {
//       delete connectedPCs[pcId];
//       console.log(`PC disconnected: ${pcId}`);
//       io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify admins
//     } else {
//       adminCount--;
//       console.log(`Admin disconnected. Total admins: ${Math.max(adminCount, 0)}`);
//     }
//   });

//   // Admin requests the current list of PCs
//   socket.on("get-connected-pcs", () => {
//     socket.emit("update-pc-list", Object.keys(connectedPCs));
//   });
// });

// server.listen(8000, () => {
//   console.log("Server running on http://localhost:8000");
// });
 
const express = require("express");
const { Server } = require("socket.io");
const http = require("http");
const cors = require("cors");

const app = express();
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

let connectedPCs = {}; // Track connected PCs
let adminCount = 0; // Track connected admins

io.on("connection", (socket) => {
  console.log(`Client connected: ${socket.id}`);

  // Handle PC registration
  socket.on("register-pc", (pcId, callback) => {
    connectedPCs[pcId] = socket.id;
    console.log(`PC registered: ${pcId}`);
    io.emit("update-pc-list", Object.keys(connectedPCs)); // Notify admins
    if (callback) callback({ success: true });
  });

  // Handle start-camera command from admin
  socket.on("start-camera", (pcId) => {
    const pcSocketId = connectedPCs[pcId];
    if (pcSocketId) {
      io.to(pcSocketId).emit("start-camera"); // Send start-camera command to PC
      console.log(`Start camera command sent to PC: ${pcId}`);
    }
  });

  // Handle close-camera command from admin
  socket.on("close-camera", (pcId) => {
    const pcSocketId = connectedPCs[pcId];
    if (pcSocketId) {
      io.to(pcSocketId).emit("close-camera"); // Send close-camera command to PC
      console.log(`Close camera command sent to PC: ${pcId}`);
    }
  });

  // Handle admin connection
  socket.on("admin-connect", () => {
    adminCount++;
    console.log(`Admin connected. Total admins: ${adminCount}`);
    if (adminCount === 1) {
      io.emit("request-re-registration");
    }
    socket.emit("update-pc-list", Object.keys(connectedPCs));
  });

  // Handle disconnection
  socket.on("disconnect", () => {
    const pcId = Object.keys(connectedPCs).find(
      (id) => connectedPCs[id] === socket.id
    );
    if (pcId) {
      delete connectedPCs[pcId];
      console.log(`PC disconnected: ${pcId}`);
      io.emit("update-pc-list", Object.keys(connectedPCs));
    } else {
      adminCount--;
      console.log(`Admin disconnected. Total admins: ${Math.max(adminCount, 0)}`);
    }
  });
});

server.listen(8000, () => {
  console.log("Server running on http://localhost:8000");
});
